{
  ".env": "SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5436/demo\r\nSPRING_DATASOURCE_USERNAME=facu\r\nSPRING_DATASOURCE_PASSWORD=1234\r\nSPRING_DATASOURCE_DB=demo\r\nCONTAINER_NAME=demo\r\n\r\n\r\n\r\n\r\n",
  "pom.xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<parent>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\n\t\t<version>3.4.1</version>\n\t\t<relativePath/> <!-- lookup parent from repository -->\n\t</parent>\n\t<groupId>com.demo</groupId>\n\t<artifactId>demo</artifactId>\n\t<version>0.0.1-SNAPSHOT</version>\n\t<name>demo</name>\n\t<description>Demo project for Spring Boot</description>\n\t<url/>\n\t<licenses>\n\t\t<license/>\n\t</licenses>\n\t<developers>\n\t\t<developer/>\n\t</developers>\n\t<scm>\n\t\t<connection/>\n\t\t<developerConnection/>\n\t\t<tag/>\n\t\t<url/>\n\t</scm>\n\t<properties>\n\t\t<java.version>21</java.version>\n\t</properties>\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.postgresql</groupId>\n\t\t\t<artifactId>postgresql</artifactId>\n\t\t\t<version>42.7.4</version> <!-- Asegúrate de que sea la versión correcta -->\n\t\t\t<scope>runtime</scope>\n\t\t</dependency>\n\n\t\t<!-- JWT Dependencies -->\n\t\t<dependency>\n\t\t\t<groupId>io.jsonwebtoken</groupId>\n\t\t\t<artifactId>jjwt-api</artifactId>\n\t\t\t<version>0.11.5</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>io.jsonwebtoken</groupId>\n\t\t\t<artifactId>jjwt-impl</artifactId>\n\t\t\t<version>0.11.5</version>\n\t\t\t<scope>runtime</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>io.jsonwebtoken</groupId>\n\t\t\t<artifactId>jjwt-jackson</artifactId>\n\t\t\t<version>0.11.5</version>\n\t\t\t<scope>runtime</scope>\n\t\t</dependency>\n\t\t<!-- JWT Dependencies -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-oauth2-client</artifactId>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\n\t\t</dependency>\n\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework.security</groupId>\n\t\t\t<artifactId>spring-security-test</artifactId>\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t</dependencies>\n\n\t<build>\n\t\t<plugins>\n\t\t\t<plugin>\n\t\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t</plugin>\n\t\t</plugins>\n\t</build>\n\n</project>\n",
  "src": {
    "main": {
      "java": {
        "com": {
          "demo": {
            "demo": {
              "config": {
                "SecurityConfig.java": "package com.demo.demo.config;\r\n\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.config.Customizer;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.security.authentication.AuthenticationManager;\r\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\r\n\r\n@Configuration\r\n@EnableWebSecurity\r\npublic class SecurityConfig {\r\n\r\n    @Bean\r\n    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n        return http\r\n                .authorizeHttpRequests(auth ->{\r\n                    auth.requestMatchers(\"/\" , \"/api/auth/**\").permitAll();\r\n                    auth.anyRequest().authenticated();\r\n                })\r\n                .oauth2Login(Customizer.withDefaults())\r\n                .build();\r\n    }\r\n\r\n    @Bean\r\n    PasswordEncoder passwordEncoder() {\r\n        return new BCryptPasswordEncoder();\r\n    }\r\n\r\n    @Bean\r\n    AuthenticationManager authenticationManager(AuthenticationConfiguration configuration) throws Exception {\r\n        return configuration.getAuthenticationManager();\r\n    }\r\n}\r\n"
              },
              "controllers": {
                "AuthController.java": "package com.demo.demo.controllers;\r\n\r\nimport com.demo.demo.entities.UserEntity;\r\nimport com.demo.demo.repositories.UserRepository;\r\nimport com.demo.demo.utils.JwtUtil;\r\nimport org.springframework.security.crypto.password.PasswordEncoder;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/auth\")\r\npublic class AuthController {\r\n\r\n    private final UserRepository userRepository;\r\n    private final JwtUtil jwtUtil;\r\n    private final PasswordEncoder passwordEncoder;\r\n\r\n    public AuthController(UserRepository userRepository, JwtUtil jwtUtil, PasswordEncoder passwordEncoder) {\r\n        this.userRepository = userRepository;\r\n        this.jwtUtil = jwtUtil;\r\n        this.passwordEncoder = passwordEncoder;\r\n    }\r\n\r\n    @PostMapping(\"/register\")\r\n    public Map<String, String> register(@RequestBody UserEntity user) {\r\n        if (userRepository.findByUsername(user.getUsername()).isPresent()) {\r\n            throw new RuntimeException(\"User already exists\");\r\n        }\r\n\r\n        // Encripta la contraseña antes de guardarla\r\n        user.setPassword(passwordEncoder.encode(user.getPassword()));\r\n        userRepository.save(user);\r\n\r\n        // Devuelve una respuesta clara\r\n        Map<String, String> response = new HashMap<>();\r\n        response.put(\"message\", \"User registered successfully\");\r\n        return response;\r\n    }\r\n\r\n    @PostMapping(\"/login\")\r\n    public Map<String, String> login(@RequestBody UserEntity user) {\r\n        UserEntity foundUser = userRepository.findByUsername(user.getUsername())\r\n                .orElseThrow(() -> new RuntimeException(\"User not found\"));\r\n\r\n        if (!passwordEncoder.matches(user.getPassword(), foundUser.getPassword())) {\r\n            throw new RuntimeException(\"Invalid credentials\");\r\n        }\r\n\r\n        // Genera el token JWT\r\n        String token = jwtUtil.generateToken(foundUser.getUsername());\r\n\r\n        // Devuelve solo el token\r\n        Map<String, String> response = new HashMap<>();\r\n        response.put(\"token\", token);\r\n        return response;\r\n    }\r\n}\r\n",
                "HomeController.java": "package com.demo.demo.controllers;\r\n\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@RestController\r\npublic class HomeController {\r\n\r\n    @GetMapping(\"/\")\r\n    public String home() {return \"Hello, Home!\";}\r\n\r\n    @GetMapping(\"/secured\")\r\n    public String secured() {return \"Hello, secured!\";}\r\n}\r\n"
              },
              "DemoApplication.java": "package com.demo.demo;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class DemoApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(DemoApplication.class, args);\n\t}\n\n}\n",
              "entities": {
                "UserEntity.java": "package com.demo.demo.entities;\r\n\r\nimport jakarta.persistence.Entity;\r\nimport jakarta.persistence.GeneratedValue;\r\nimport jakarta.persistence.GenerationType;\r\nimport jakarta.persistence.Id;\r\n\r\n@Entity\r\npublic class UserEntity {\r\n\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n\r\n    private String username;\r\n    private String password;\r\n\r\n    // Getters y setters\r\n    public Long getId() {\r\n        return id;\r\n    }\r\n\r\n    public void setId(Long id) {\r\n        this.id = id;\r\n    }\r\n\r\n    public String getUsername() {\r\n        return username;\r\n    }\r\n\r\n    public void setUsername(String username) {\r\n        this.username = username;\r\n    }\r\n\r\n    public String getPassword() {\r\n        return password;\r\n    }\r\n\r\n    public void setPassword(String password) {\r\n        this.password = password;\r\n    }\r\n}\r\n"
              },
              "repositories": {
                "UserRepository.java": "package com.demo.demo.repositories;\r\n\r\nimport com.demo.demo.entities.UserEntity;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport java.util.Optional;\r\n\r\npublic interface UserRepository extends JpaRepository<UserEntity, Long> {\r\n    Optional<UserEntity> findByUsername(String username);\r\n}\r\n"
              },
              "services": {
                "UserService.java": "package com.demo.demo.services;\r\n\r\nimport com.demo.demo.entities.UserEntity;\r\nimport com.demo.demo.repositories.UserRepository;\r\nimport org.springframework.security.core.userdetails.User;\r\nimport org.springframework.security.core.userdetails.UserDetails;\r\nimport org.springframework.security.core.userdetails.UserDetailsService;\r\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\r\nimport org.springframework.stereotype.Service;\r\n\r\n@Service\r\npublic class UserService implements UserDetailsService {\r\n\r\n    private final UserRepository userRepository;\r\n\r\n    public UserService(UserRepository userRepository) {\r\n        this.userRepository = userRepository;\r\n    }\r\n\r\n    @Override\r\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\r\n        UserEntity user = userRepository.findByUsername(username)\r\n                .orElseThrow(() -> new UsernameNotFoundException(\"User not found\"));\r\n\r\n        return User.builder()\r\n                .username(user.getUsername())\r\n                .password(user.getPassword())\r\n                .roles(\"USER\")\r\n                .build();\r\n    }\r\n}\r\n"
              },
              "utils": {
                "JwtUtil.java": "package com.demo.demo.utils;\r\n\r\nimport io.jsonwebtoken.Jwts;\r\nimport io.jsonwebtoken.SignatureAlgorithm;\r\nimport org.springframework.stereotype.Component;\r\n\r\nimport java.util.Date;\r\n\r\n@Component\r\npublic class JwtUtil {\r\n\r\n    private final String SECRET_KEY = \"secret\";\r\n\r\n    public String generateToken(String username) {\r\n        return Jwts.builder()\r\n                .setSubject(username)\r\n                .setIssuedAt(new Date())\r\n                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 10)) // 10 horas\r\n                .signWith(SignatureAlgorithm.HS256, SECRET_KEY)\r\n                .compact();\r\n    }\r\n\r\n    public String extractUsername(String token) {\r\n        return Jwts.parser().setSigningKey(SECRET_KEY).parseClaimsJws(token).getBody().getSubject();\r\n    }\r\n}\r\n"
              }
            }
          }
        }
      },
      "resources": {
        "application.properties": "spring.application.name=demo\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect\nspring.jpa.hibernate.ddl-auto=update\nspring.config.import=optional:file:.env[.properties]\nspring.datasource.url=${SPRING_DATASOURCE_URL}\nspring.datasource.username=${SPRING_DATASOURCE_USERNAME}\nspring.datasource.password=${SPRING_DATASOURCE_PASSWORD}\n\n#google\nspring.security.oauth2.client.registration.google.client-id=80103548343-ovr3tfi9kn453cs5bc2e0e0qnk6anaoo.apps.googleusercontent.com\nspring.security.oauth2.client.registration.google.client-secret=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\n\nlogging.level.org.springframework.security=TRACE"
      }
    },
    "test": {
      "java": {
        "com": {
          "demo": {
            "demo": {
              "DemoApplicationTests.java": "package com.demo.demo;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.boot.test.context.SpringBootTest;\n\n@SpringBootTest\nclass DemoApplicationTests {\n\n\t@Test\n\tvoid contextLoads() {\n\t}\n\n}\n"
            }
          }
        }
      }
    }
  }
}